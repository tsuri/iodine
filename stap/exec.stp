function progenyof(pid:long) {
    parent = task_parent(task_current());
    task = pid2task(pid);

    while(parent && task_pid(parent) > 0) {
        if(task == parent)
            return 1;

        parent = task_parent(parent);
    }
}

probe begin
{
  printf("PID %d", target());
  printf("%-24s %6s %6s %6s %14s %s\n", "TIME", "UID", "PPID", "PID",
	 "COMM", "ARGS");
}

probe nd_syscall.execve.return
{
  if(progenyof(target()))
    printf("%-24s %6d %6d %6d %14s %s\n", ctime(gettimeofday_s()), uid(),
	   ppid(), pid(), execname(), cmdline_str());
}

probe scheduler.process*, scheduler.wakeup_new, syscall.fork, 
    syscall.exec*, syscall.exit, syscall.wait*, kprocess.* { 
    printf("%6d[%8s]/%6d[%8s] %s\n", 
        pid(), execname(), ppid(), pid2execname(ppid()), pn());
}

probe scheduler.process_fork {
    printf("\tPID: %d -> %d\n", parent_pid, child_pid);
}

probe kprocess.exec {
    printf("\tfilename: %s\n", filename);
}

probe kprocess.exit {
  if(progenyof(target()))
    printf("\treturn code: %6d %s %d\n", pid(), execname(), code);
}
