#cloud-config

hostname: <%= hostname %>

users:
  - name: infra
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCnise8Ql7dQmGI9rFeVnAruZurcLmJ3gVij+UikK+1gFwzJqMA2aRAC+DxGIRmDMeS0IxhM469TgkWTffu0P2QuwQdWDrHEYVolqlNUUtTTmL80Apl/TY5lteWx5yrMVxmOO/y7rJFq07GgAQtx7WPQPZ/TodG+KpOmTtGDhxZ1GM1MBK0SpfvVCTQtapZNYe431NuY++R1WVnSWI+GStQcgi+ZnB8iPlK/S70fhMqhqGi77hHyQ/riOmZnyiqO2ku4GSPHhm+sIglmDkzB6q9/0jIBtcy1ChAzSEW4ej3xr6zxitxZQh5eUrYGMTaOHfQU68YlgNLGbStTNXAplyf mav@idoniko
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    groups:
      - sudo
    shell: /bin/bash

write-files:
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && [ -n "$2" ] && while ! curl --output /dev/null \
        --silent --head --fail \
        http://${1}:${2}; do sleep 1 && echo -n .; done;
      exit $?
      
coreos:
  fleet:
    etcd-servers: <%= coreos_etcd_servers %>
    public-ip: $public_ipv4
    metadata: role=coreos_node,disk=ssd
  flannel:
    interface: "$public_ipv4"
    etcd_endpoints: "<%= kubernetes_etcd_servers %>"
  locksmith:
    endpoint: "<%= coreos_etcd_servers %>"
  units:
    - name: rpcbind.service
      enable: true
      command: start
    - name: rpc-statd.service
      enable: true
      command: start
    - name: format-media-node0.service
      command: start
      content: |
        [Unit]
        Description=Formats the dedicated node disk
        After=dev-sdb.device
        Requires=dev-sdb.device
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/sdb
        # here we should create a partition and format that. More flexible if we want to resize
        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/sdb
    - name: media-node0.mount
      command: start
      content: |
        [Unit]
        Description=Mount node to /media/node0
        Requires=format-media-node0.service
        After=format-media-node0.service
        [Mount]
        # here we should use the partition /dev/sdb1
        What=/dev/sdb
        Where=/media/node0
        Type=ext4
    - name: format-media-node1.service
      command: start
      content: |
        [Unit]
        Description=Formats the dedicated node disk
        After=dev-sdc.device
        Requires=dev-sdc.device
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/sdc
        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/sdc
    - name: media-node1.mount
      command: start
      content: |
        [Unit]
        Description=Mount node to /media/node1
        Requires=format-media-node1.service
        After=format-media-node1.service
        [Mount]
        What=/dev/sdc
        Where=/media/node1
        Type=ext4
    - name: systemd-timesyncd.service
      command: start
    - name: fleet.service
      command: start
      etcd_servers: <%= coreos_etcd_servers %>
    - name: flanneld.service
      etcd-endpoints: <%= kubernetes_etcd_servers %>
      drop-ins:
      - name: 50-network-config.conf
        content: |
          [Service]
          ExecStartPre=/usr/bin/etcdctl --endpoints=<%= kubernetes_etcd_servers %> set /coreos.com/network/config '{ "Network": "<%= kubernetes_pods_cidr %>" }'
      command: start
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=2375
        Service=docker.service
        BindIPv6Only=both

        [Install]
        WantedBy=sockets.target
    - name: docker.service
      drop-ins:
        - name: 10-tls-verify.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=--dns=<%= kubernetes_dns_ip %>"
    - name: kube-kubelet.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        [Service]
        # wait for kubernetes master to be up and ready
        ExecStartPre=/opt/bin/wupiao <%= kubernetes_master %> 8080
        ExecStart=/opt/bin/hyperkube \
        kubelet \
        --api_servers=<%= kubernetes_master %>:8080 \
        --cluster-domain=<%= domain %> \
        --cluster-dns=<%= kubernetes_dns_ip %> \
        --address=0.0.0.0 \
        --port=10250 \
        --hostname_override=<%= hostname %> \
        --allow_privileged=true \
        --logtostderr=true \
        --config=/opt/kubernetes/manifests/ \
        --cadvisor_port=4194 \
        --healthz_bind_address=0.0.0.0 \
        --healthz_port=10248 \
        --v=3
        Restart=always
        RestartSec=10
    - name: kube-proxy.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Kubernetes proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=network-online.target
        After=network-online.target
        [Service]
        # wait for kubernetes master to be up and ready
        ExecStartPre=/opt/bin/wupiao <%= kubernetes_master %> 8080
        ExecStart=/opt/bin/hyperkube \
        proxy \
        --master=<%= kubernetes_master %>:8080 \
        --cluster-cidr=<%= kubernetes_pods_cidr %> \
        --logtostderr=true \
        --v=3
        Restart=always
        RestartSec=10
update:
#    reboot-strategy: etcd-lock
    reboot-strategy: off
